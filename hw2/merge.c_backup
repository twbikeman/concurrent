#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include <sys/shm.h>
#include <sys/ipc.h>


int search(int *a, int left, int right, int x) {
  int middle =  (left + right) / 2;
  if (x < a[left]) return left;
  if (x > a[right]) return right + 1;
  if ( a[middle] >  x &&  x > a[middle - 1]) return middle;
  if (x < a[middle] )
    return search(a, left, middle - 1, x);
  else
    return search(a, middle + 1, right, x);
}


void MergeSort(int left, int right, char **params) {
  char message[80];
  if (fork() == 0) {
    sprintf(message, "### M-PROC(%d) created by M-PROC(%d): entering with a[%d..%d]\n", getpid(), getppid(), left, right);
    write(1, message, strlen(message));
    sprintf(params[1], "%d", left);
    sprintf(params[2], "%d", right);
    
       execvp(params[0], params); 

    
     }
  else
    return;

  

  /* write(1, message, strlen(message)); */
  /* messsagePtr = message; */
  /* write(1, message, strlen(message)); */
  /* sprintf(params[1], "%d", middle + 1); */
  /* sprintf(params[2], "%d", right); */
  
  /* if (fork() == 0) { */
    
  /*     execvp(params[0], params); */
    
  /* } */
  /* else */
  /*   return; */


}

/* void Merge() { */

/* } */



int main(int argc, char **argv) {
  int left, right, middle, num;
  left = atoi(argv[1]);
  right = atoi(argv[2]);
  char proc[10];
  strcpy(proc, argv[3])
    if (argv[4] == NULL)  ppid = 0;
    int  ppid = atoi(argv[4])
  middle = (left + right) / 2;
  num = right - left + 1;
  /* char message[80]; */
  /* char *messagePtr = message; */

  /* int *mem = malloc(num * sizeof(int)); */
  /* key_t key= ftok("shmfile", 'a'); */
  /* int shm_id = shmget(key, 1024 * sizeof(int), 0666); */
  /* int *shm_ptr = (int *)shmat(shm_id, NULL, 0); */

  char param[3][80];
  sprintf(param[0], "%s", "./merge");
  sprintf(param[1], "%d", left);
  sprintf(param[2], "%d", right);

  char *params[4];
  params[0] = param[0];
  params[1] = param[1];
  params[2] = param[2];
  params[3] = NULL;
  

  
  

  if (num == 1) {
    exit(EXIT_SUCCESS);
  }
  else if (num == 2) {
    exit(EXIT_SUCCESS);
  }
    
  MergeSort(left , middle, params);
  MergeSort(middle + 1 ,right, params);
  wait(NULL);
  wait(NULL);
  /* MergeSort(middle + 1, right, &params, message); */
  /* wait(NULL); */
  /* wait(NULL); */
   /* Merge(); */



  /* if (fork() != 0) { /\* parent *\/ */
  /*   if (fork () != 0) { */
  /*     wait(NULL); */
  /*     wait(NULL); */

  /*     write(1, message, strlen(message)); */

      
  /*     /\* free(mem); *\/ */
  /*   } */
  /*   else {           /\* child 2 *\/ */
  /*     execvp(param[0], param); */
  /*   } */
  /* } */
  /* else {   /\* child 1 *\/ */
  /*   sprintf(params[0], "%s", "./merge"); */
  /*   sprintf(params[1], "%d", left); */
  /*   sprintf(params[2], "%d", middle); */
  /*   param[0] = params[0]; */
  /*   param[1] = params[1]; */
  /*   param[2] = params[2]; */
  /*   param[3] = NULL; */
  /*   execvp(param[0], param); */
  /* } */

  

  
  /* int a[] = {1,2,9,10}; */
  /* int b[] = {4,5,6}; */
  /* int c[7] = {0}; */
  /* int x, i; */
  /* for (i = 0; i < 3; i++) { */
  /*   x = search(a, 0, 3, b[i]); */
  /*   c[x + i] = b[i]; */
  /* } */
  /* for (i = 0; i < 4; i++) { */
  /*   x = search(b, 0, 2, a[i]); */
  /*   c[x + i] = a[i]; */
  /* } */

  /* for(i = 0; i < 7; i++) */
  /*   printf("%d\t", c[i]); */


  return 0;
}
