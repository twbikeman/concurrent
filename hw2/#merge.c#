/*--------------------------------------------*/

/* NAME : Bryan Tsai       User ID: 107589064 */
/* DUE DATE  : 04/20/2020                     */
/* PROGRAM ASSIGNMENT #2                      */
/* FILE NAME : merge.c                        */
/* PROGRAM PURPOSE :                          */
/*         receive index and ppid from another*/ 
/*         program. Use mergesort to sort data*/ 
/*         in shared memory.                  */
/*         memory to store these data. Then,  */
/*         call merge program.                */
/*--------------------------------------------*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <sys/types.h>
#include <sys/wait.h>


void MergeSort(int left, int right, int ppid) {
  
  char param[4][80];
  
  sprintf(param[0], "./merge");
  sprintf(param[1], "%d", left);
  sprintf(param[2], "%d", right);
  sprintf(param[3], "%d", ppid);

  char *params[5] = {param[0], param[1], param[2], param[3], NULL};

  if (fork() == 0) {
    execvp(params[0], params); 
  }
  else
    return;
}


int search(int *a, int left, int right, int x) {
  int middle =  (left + right) / 2;
  if (x < a[left]) return left;
  if (x > a[right]) return right + 1;
  if ( (a[middle] >  x) &&  (x > a[middle - 1])) return middle;
  if (x < a[middle - 1] )
    return search(a, left, middle - 1, x);
  else
    return search(a, middle + 1, right, x);
}

  
void BinaryMerge(int left, int right, int ppid, int *shm_ptr) {
  if (fork() == 0) {
    int i, pos, tempIndex = 0;
    int middle  = (left + right) / 2;
    int num = right - left + 1;
    int temp[num];
    char message_create[180];

    for(i = left; i <= right; i++) {
    
      char *message_createPtr = message_create;
      message_createPtr += sprintf(message_createPtr, "      $$$ B-PROC(%d): create by M-PROC(%d) for a[%d] = %d is created\n", getpid(), ppid, i, shm_ptr[i]);
      
      message_createPtr += sprintf(message_createPtr, "      $$$ B-PROC(%d): a[%d] = %d", getpid(), i, shm_ptr[i]);
      if (i <= middle) {
	pos = search(shm_ptr, middle + 1, right, shm_ptr[i] );
	tempIndex = i - left +  pos - (middle + 1); /* temp's index */
	if (pos == middle + 1) {
	  message_createPtr +=  sprintf(message_createPtr, " is smaller than a[%d] = %d is written to temp[%d]\n", middle + 1, shm_ptr[middle + 1], tempIndex); /* delta = 0 */

	}
	

	else if (pos == (right + 1)) {
	  message_createPtr +=  sprintf(message_createPtr, " is larger than a[%d] = %d is written to temp[%d]\n", right, shm_ptr[right], tempIndex); /* delta = right + 1 -left */

	}
	else {
	  message_createPtr +=  sprintf(message_createPtr, " is between  a[%d] = %d  and a[%d] = %d and written to temp[%d]\n", pos-1, shm_ptr[pos-1], pos, shm_ptr[pos], tempIndex);

	}
	temp[tempIndex] = shm_ptr[i];

      }
      else {
	pos = search(shm_ptr, left, middle, shm_ptr[i] );
	tempIndex = i - (middle + 1) + pos - left; /* temp's index */
	if (pos == left) {
	  message_createPtr +=  sprintf(message_createPtr, " is smaller than a[%d] = %d is written to temp[%d]\n", left, shm_ptr[left], tempIndex);

	}
	else if (pos == (middle + 1)) {
	  message_createPtr +=  sprintf(message_createPtr, " is larger than a[%d] = %d is written to temp[%d]\n", middle, shm_ptr[middle], tempIndex);
	  	 
	}
	else {
	  message_createPtr +=  sprintf(message_createPtr, " is between  a[%d] = %d  and a[%d] = %d and is written to temp[%d]\n", pos-1, shm_ptr[pos-1], pos, shm_ptr[pos], tempIndex);
	 
	}
	temp[tempIndex] = shm_ptr[i];
      }

      write(1,message_create, strlen(message_create));

    
      
    }

    memcpy(shm_ptr + left , temp, num * sizeof(int));

    
    exit(EXIT_SUCCESS);
  }
  else
    return;
}


int main(int argc ,char **argv) {
  int left, right, middle, num, ppid = 0, pid, i;
  left = atoi(argv[1]);
  right = atoi(argv[2]);

  pid = getpid();
  if (argv[3] != NULL)
    ppid = atoi(argv[3]);

  char message_enter[80];
  char *message_enterPtr = message_enter;


  middle = (right + left) / 2;
  num = right - left + 1;

  key_t key = ftok("shmfile", 'a');
  int shm_id = shmget(key, 1024 * sizeof(int), 0666);
  int *shm_ptr = (int *)shmat(shm_id, NULL, 0);

  

  if (num == 1) {
    exit(EXIT_SUCCESS);
  }
     

  /* dispaly entering info */
  
  message_enterPtr += sprintf(message_enterPtr, "   ### M-PROC(%d)", getpid() );
  if (ppid != 0)
    message_enterPtr += sprintf(message_enterPtr, " created by M-PROC(%d)", ppid);
  message_enterPtr += sprintf(message_enterPtr, ": entering with a[%d..%d]\n", left, right);
  message_enterPtr += sprintf(message_enterPtr, "   ");
  for (i = 0; i < num; i++)
    message_enterPtr += sprintf(message_enterPtr, "   %d", shm_ptr[left + i]);
  message_enterPtr += sprintf(message_enterPtr, "\n");

  write(1, message_enter, strlen(message_enter));   

  /* sort process */

  if (num == 2 && (shm_ptr[left] > shm_ptr[right])) {
    message_enterPtr = message_enter;
    message_enterPtr += sprintf(message_enterPtr, "   ### M-PROC(%d)", getpid() );
    if (ppid != 0)
      message_enterPtr += sprintf(message_enterPtr, " created by M-PROC(%d)", ppid);
    message_enterPtr += sprintf(message_enterPtr, ": entering with a[%d..%d] -- sorted\n", left, right);
    int temp = shm_ptr[left];
    shm_ptr[left] = shm_ptr[right];
    shm_ptr[right] = temp;
    
    message_enterPtr += sprintf(message_enterPtr, "   ");
    for (i = 0; i < num; i++)
      message_enterPtr += sprintf(message_enterPtr, "   %d", shm_ptr[left + i]);
    message_enterPtr += sprintf(message_enterPtr, "\n");   
    write(1, message_enter, strlen(message_enter));   
   
  }
  
  if (num == 2) {
    exit(EXIT_SUCCESS);
  }

  
  MergeSort(left, middle, pid);
  MergeSort(middle + 1, right, pid);
  wait(NULL);
  wait(NULL);
  
  BinaryMerge(left, right, pid, shm_ptr);

  wait(NULL);

  /* display merge completion info */
  
  char message_complete[80];
  char *message_completePtr = message_complete;
  message_completePtr += sprintf(message_complete, "   ### M-PROC(%d) created by M-PROC(%d): merge sort a[%d..%d] complete\n", pid, ppid, left, right);
  for (i = 0; i < num; i++)
    message_completePtr += sprintf(message_completePtr, "   %d", shm_ptr[left + i]);
  message_completePtr += sprintf(message_completePtr, "\n");   
  
  
  write(1, message_complete, strlen(message_complete));

  exit(EXIT_SUCCESS);
}
